[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.0.2\thang\ping-pong\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Espressif/frameworks/esp-idf-v5.0.2/thang/ping-pong/build/bootloader/bootloader.bin"
Bootloader binary size 0x6710 bytes. 0x8f0 bytes (8%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable lora.elf
[6/8] Generating binary image from built executable
esptool.py v4.5.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Espressif/frameworks/esp-idf-v5.0.2/thang/ping-pong/build/lora.bin
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.0.2\thang\ping-pong\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Espressif/frameworks/esp-idf-v5.0.2/thang/ping-pong/build/partition_table/partition-table.bin C:/Espressif/frameworks/esp-idf-v5.0.2/thang/ping-pong/build/lora.bin"
lora.bin binary size 0x3a6d0 bytes. Smallest app partition is 0x100000 bytes. 0xc5930 bytes (77%) free.
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.0.2\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.0.2 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.0_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.0.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Espressif/frameworks/esp-idf-v5.0.2/thang/ping-pong/build -P C:/Espressif/frameworks/esp-idf-v5.0.2/components/esptool_py/run_serial_tool.cmake"
esptool esp32 -p COM18 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 lora.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.5.1
Serial port COM18
Connecting....
Chip is ESP32-D0WDQ6 (revision v0.0)
Features: WiFi, BT, Dual Core, Coding Scheme None
Crystal is 40MHz
MAC: 24:0a:c4:06:d6:00
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0004afff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26384 bytes to 16452...
Writing at 0x00001000... (50 %)
Writing at 0x000076ae... (100 %)
Wrote 26384 bytes (16452 compressed) at 0x00001000 in 0.8 seconds (effective 265.0 kbit/s)...
Hash of data verified.
Compressed 239312 bytes to 127603...
Writing at 0x00010000... (12 %)
Writing at 0x0001c5c5... (25 %)
Writing at 0x00023b53... (37 %)
Writing at 0x00029a2c... (50 %)
Writing at 0x0002f308... (62 %)
Writing at 0x0003817e... (75 %)
Writing at 0x0003fda1... (87 %)
Writing at 0x000458d5... (100 %)
Wrote 239312 bytes (127603 compressed) at 0x00010000 in 3.4 seconds (effective 558.7 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 515.0 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
